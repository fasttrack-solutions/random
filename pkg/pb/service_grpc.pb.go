// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Random_GetRandomFloat64_FullMethodName       = "/random.Random/GetRandomFloat64"
	Random_GetRandomInt64_FullMethodName         = "/random.Random/GetRandomInt64"
	Random_GetDeterministicRandom_FullMethodName = "/random.Random/GetDeterministicRandom"
)

// RandomClient is the client API for Random service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomClient interface {
	GetRandomFloat64(ctx context.Context, in *GetRandomFloat64Request, opts ...grpc.CallOption) (*GetRandomFloat64Response, error)
	GetRandomInt64(ctx context.Context, in *GetRandomInt64Request, opts ...grpc.CallOption) (*GetRandomInt64Response, error)
	GetDeterministicRandom(ctx context.Context, in *GetDeterministicRandomRequest, opts ...grpc.CallOption) (*GetDeterministicRandomResponse, error)
}

type randomClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomClient(cc grpc.ClientConnInterface) RandomClient {
	return &randomClient{cc}
}

func (c *randomClient) GetRandomFloat64(ctx context.Context, in *GetRandomFloat64Request, opts ...grpc.CallOption) (*GetRandomFloat64Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomFloat64Response)
	err := c.cc.Invoke(ctx, Random_GetRandomFloat64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomClient) GetRandomInt64(ctx context.Context, in *GetRandomInt64Request, opts ...grpc.CallOption) (*GetRandomInt64Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomInt64Response)
	err := c.cc.Invoke(ctx, Random_GetRandomInt64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomClient) GetDeterministicRandom(ctx context.Context, in *GetDeterministicRandomRequest, opts ...grpc.CallOption) (*GetDeterministicRandomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeterministicRandomResponse)
	err := c.cc.Invoke(ctx, Random_GetDeterministicRandom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomServer is the server API for Random service.
// All implementations should embed UnimplementedRandomServer
// for forward compatibility.
type RandomServer interface {
	GetRandomFloat64(context.Context, *GetRandomFloat64Request) (*GetRandomFloat64Response, error)
	GetRandomInt64(context.Context, *GetRandomInt64Request) (*GetRandomInt64Response, error)
	GetDeterministicRandom(context.Context, *GetDeterministicRandomRequest) (*GetDeterministicRandomResponse, error)
}

// UnimplementedRandomServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRandomServer struct{}

func (UnimplementedRandomServer) GetRandomFloat64(context.Context, *GetRandomFloat64Request) (*GetRandomFloat64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomFloat64 not implemented")
}
func (UnimplementedRandomServer) GetRandomInt64(context.Context, *GetRandomInt64Request) (*GetRandomInt64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomInt64 not implemented")
}
func (UnimplementedRandomServer) GetDeterministicRandom(context.Context, *GetDeterministicRandomRequest) (*GetDeterministicRandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeterministicRandom not implemented")
}
func (UnimplementedRandomServer) testEmbeddedByValue() {}

// UnsafeRandomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomServer will
// result in compilation errors.
type UnsafeRandomServer interface {
	mustEmbedUnimplementedRandomServer()
}

func RegisterRandomServer(s grpc.ServiceRegistrar, srv RandomServer) {
	// If the following call pancis, it indicates UnimplementedRandomServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Random_ServiceDesc, srv)
}

func _Random_GetRandomFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomFloat64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomServer).GetRandomFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Random_GetRandomFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomServer).GetRandomFloat64(ctx, req.(*GetRandomFloat64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Random_GetRandomInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomInt64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomServer).GetRandomInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Random_GetRandomInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomServer).GetRandomInt64(ctx, req.(*GetRandomInt64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Random_GetDeterministicRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeterministicRandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomServer).GetDeterministicRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Random_GetDeterministicRandom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomServer).GetDeterministicRandom(ctx, req.(*GetDeterministicRandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Random_ServiceDesc is the grpc.ServiceDesc for Random service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Random_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "random.Random",
	HandlerType: (*RandomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomFloat64",
			Handler:    _Random_GetRandomFloat64_Handler,
		},
		{
			MethodName: "GetRandomInt64",
			Handler:    _Random_GetRandomInt64_Handler,
		},
		{
			MethodName: "GetDeterministicRandom",
			Handler:    _Random_GetDeterministicRandom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/service.proto",
}
